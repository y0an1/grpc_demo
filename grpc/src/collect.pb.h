// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/collect.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fcollect_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fcollect_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fcollect_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fcollect_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fcollect_2eproto;
namespace collect {
class ApiInfo;
struct ApiInfoDefaultTypeInternal;
extern ApiInfoDefaultTypeInternal _ApiInfo_default_instance_;
class CollectResult;
struct CollectResultDefaultTypeInternal;
extern CollectResultDefaultTypeInternal _CollectResult_default_instance_;
class DeviceInfo;
struct DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class FileContext;
struct FileContextDefaultTypeInternal;
extern FileContextDefaultTypeInternal _FileContext_default_instance_;
class FileInfo;
struct FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class PropInfo;
struct PropInfoDefaultTypeInternal;
extern PropInfoDefaultTypeInternal _PropInfo_default_instance_;
}  // namespace collect
PROTOBUF_NAMESPACE_OPEN
template<> ::collect::ApiInfo* Arena::CreateMaybeMessage<::collect::ApiInfo>(Arena*);
template<> ::collect::CollectResult* Arena::CreateMaybeMessage<::collect::CollectResult>(Arena*);
template<> ::collect::DeviceInfo* Arena::CreateMaybeMessage<::collect::DeviceInfo>(Arena*);
template<> ::collect::FileContext* Arena::CreateMaybeMessage<::collect::FileContext>(Arena*);
template<> ::collect::FileInfo* Arena::CreateMaybeMessage<::collect::FileInfo>(Arena*);
template<> ::collect::PropInfo* Arena::CreateMaybeMessage<::collect::PropInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace collect {

// ===================================================================

class CollectResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:collect.CollectResult) */ {
 public:
  inline CollectResult() : CollectResult(nullptr) {}
  ~CollectResult() override;
  explicit constexpr CollectResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectResult(const CollectResult& from);
  CollectResult(CollectResult&& from) noexcept
    : CollectResult() {
    *this = ::std::move(from);
  }

  inline CollectResult& operator=(const CollectResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectResult& operator=(CollectResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollectResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollectResult* internal_default_instance() {
    return reinterpret_cast<const CollectResult*>(
               &_CollectResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CollectResult& a, CollectResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollectResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollectResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollectResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CollectResult& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "collect.CollectResult";
  }
  protected:
  explicit CollectResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kOkFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // int32 result = 2;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:collect.CollectResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool ok_;
  int32_t result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcollect_2eproto;
};
// -------------------------------------------------------------------

class DeviceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:collect.DeviceInfo) */ {
 public:
  inline DeviceInfo() : DeviceInfo(nullptr) {}
  ~DeviceInfo() override;
  explicit constexpr DeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceInfo(const DeviceInfo& from);
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeviceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeviceInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "collect.DeviceInfo";
  }
  protected:
  explicit DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
    kProductFieldNumber = 2,
  };
  // string model = 1;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string product = 2;
  void clear_product();
  const std::string& product() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product();
  PROTOBUF_NODISCARD std::string* release_product();
  void set_allocated_product(std::string* product);
  private:
  const std::string& _internal_product() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product(const std::string& value);
  std::string* _internal_mutable_product();
  public:

  // @@protoc_insertion_point(class_scope:collect.DeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcollect_2eproto;
};
// -------------------------------------------------------------------

class FileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:collect.FileInfo) */ {
 public:
  inline FileInfo() : FileInfo(nullptr) {}
  ~FileInfo() override;
  explicit constexpr FileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileInfo(const FileInfo& from);
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "collect.FileInfo";
  }
  protected:
  explicit FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 2,
    kFileAttrFieldNumber = 3,
    kFileAttrExFieldNumber = 4,
    kFileContextFieldNumber = 6,
    kFileTypeFieldNumber = 7,
    kDevIdFieldNumber = 1,
    kErrnoFieldNumber = 5,
  };
  // string file_path = 2;
  void clear_file_path();
  const std::string& file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_path();
  PROTOBUF_NODISCARD std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // string file_attr = 3;
  void clear_file_attr();
  const std::string& file_attr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_attr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_attr();
  PROTOBUF_NODISCARD std::string* release_file_attr();
  void set_allocated_file_attr(std::string* file_attr);
  private:
  const std::string& _internal_file_attr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_attr(const std::string& value);
  std::string* _internal_mutable_file_attr();
  public:

  // string file_attr_ex = 4;
  void clear_file_attr_ex();
  const std::string& file_attr_ex() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_attr_ex(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_attr_ex();
  PROTOBUF_NODISCARD std::string* release_file_attr_ex();
  void set_allocated_file_attr_ex(std::string* file_attr_ex);
  private:
  const std::string& _internal_file_attr_ex() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_attr_ex(const std::string& value);
  std::string* _internal_mutable_file_attr_ex();
  public:

  // bytes file_context = 6;
  void clear_file_context();
  const std::string& file_context() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_context(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_context();
  PROTOBUF_NODISCARD std::string* release_file_context();
  void set_allocated_file_context(std::string* file_context);
  private:
  const std::string& _internal_file_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_context(const std::string& value);
  std::string* _internal_mutable_file_context();
  public:

  // string file_type = 7;
  void clear_file_type();
  const std::string& file_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_type();
  PROTOBUF_NODISCARD std::string* release_file_type();
  void set_allocated_file_type(std::string* file_type);
  private:
  const std::string& _internal_file_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_type(const std::string& value);
  std::string* _internal_mutable_file_type();
  public:

  // int32 dev_id = 1;
  void clear_dev_id();
  int32_t dev_id() const;
  void set_dev_id(int32_t value);
  private:
  int32_t _internal_dev_id() const;
  void _internal_set_dev_id(int32_t value);
  public:

  // int32 errno = 5;
  void clear_errno();
  int32_t get_errno() const;
  void set_errno(int32_t value);
  private:
  int32_t _internal_errno() const;
  void _internal_set_errno(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:collect.FileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_attr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_attr_ex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_context_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_type_;
  int32_t dev_id_;
  int32_t errno_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcollect_2eproto;
};
// -------------------------------------------------------------------

class FileContext final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:collect.FileContext) */ {
 public:
  inline FileContext() : FileContext(nullptr) {}
  ~FileContext() override;
  explicit constexpr FileContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileContext(const FileContext& from);
  FileContext(FileContext&& from) noexcept
    : FileContext() {
    *this = ::std::move(from);
  }

  inline FileContext& operator=(const FileContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileContext& operator=(FileContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileContext* internal_default_instance() {
    return reinterpret_cast<const FileContext*>(
               &_FileContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileContext& a, FileContext& b) {
    a.Swap(&b);
  }
  inline void Swap(FileContext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileContext>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileContext& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileContext& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileContext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "collect.FileContext";
  }
  protected:
  explicit FileContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileContextFieldNumber = 4,
    kFileIdFieldNumber = 1,
    kVerifyFieldNumber = 2,
    kFileContextLenFieldNumber = 3,
  };
  // bytes file_context = 4;
  void clear_file_context();
  const std::string& file_context() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_context(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_context();
  PROTOBUF_NODISCARD std::string* release_file_context();
  void set_allocated_file_context(std::string* file_context);
  private:
  const std::string& _internal_file_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_context(const std::string& value);
  std::string* _internal_mutable_file_context();
  public:

  // int32 file_id = 1;
  void clear_file_id();
  int32_t file_id() const;
  void set_file_id(int32_t value);
  private:
  int32_t _internal_file_id() const;
  void _internal_set_file_id(int32_t value);
  public:

  // int32 verify = 2;
  void clear_verify();
  int32_t verify() const;
  void set_verify(int32_t value);
  private:
  int32_t _internal_verify() const;
  void _internal_set_verify(int32_t value);
  public:

  // int32 file_context_len = 3;
  void clear_file_context_len();
  int32_t file_context_len() const;
  void set_file_context_len(int32_t value);
  private:
  int32_t _internal_file_context_len() const;
  void _internal_set_file_context_len(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:collect.FileContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_context_;
  int32_t file_id_;
  int32_t verify_;
  int32_t file_context_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcollect_2eproto;
};
// -------------------------------------------------------------------

class PropInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:collect.PropInfo) */ {
 public:
  inline PropInfo() : PropInfo(nullptr) {}
  ~PropInfo() override;
  explicit constexpr PropInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropInfo(const PropInfo& from);
  PropInfo(PropInfo&& from) noexcept
    : PropInfo() {
    *this = ::std::move(from);
  }

  inline PropInfo& operator=(const PropInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropInfo& operator=(PropInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropInfo* internal_default_instance() {
    return reinterpret_cast<const PropInfo*>(
               &_PropInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PropInfo& a, PropInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PropInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PropInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "collect.PropInfo";
  }
  protected:
  explicit PropInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalFieldNumber = 2,
    kOriginFieldNumber = 3,
    kKeyFieldNumber = 4,
    kValueFieldNumber = 5,
    kDevIdFieldNumber = 1,
  };
  // string local = 2;
  void clear_local();
  const std::string& local() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local();
  PROTOBUF_NODISCARD std::string* release_local();
  void set_allocated_local(std::string* local);
  private:
  const std::string& _internal_local() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local(const std::string& value);
  std::string* _internal_mutable_local();
  public:

  // string origin = 3;
  void clear_origin();
  const std::string& origin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_origin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_origin();
  PROTOBUF_NODISCARD std::string* release_origin();
  void set_allocated_origin(std::string* origin);
  private:
  const std::string& _internal_origin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin(const std::string& value);
  std::string* _internal_mutable_origin();
  public:

  // string key = 4;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 5;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 dev_id = 1;
  void clear_dev_id();
  int32_t dev_id() const;
  void set_dev_id(int32_t value);
  private:
  int32_t _internal_dev_id() const;
  void _internal_set_dev_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:collect.PropInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int32_t dev_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcollect_2eproto;
};
// -------------------------------------------------------------------

class ApiInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:collect.ApiInfo) */ {
 public:
  inline ApiInfo() : ApiInfo(nullptr) {}
  ~ApiInfo() override;
  explicit constexpr ApiInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApiInfo(const ApiInfo& from);
  ApiInfo(ApiInfo&& from) noexcept
    : ApiInfo() {
    *this = ::std::move(from);
  }

  inline ApiInfo& operator=(const ApiInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApiInfo& operator=(ApiInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApiInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApiInfo* internal_default_instance() {
    return reinterpret_cast<const ApiInfo*>(
               &_ApiInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ApiInfo& a, ApiInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ApiInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApiInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApiInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApiInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApiInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ApiInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApiInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "collect.ApiInfo";
  }
  protected:
  explicit ApiInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApiNameFieldNumber = 2,
    kApiArgsFieldNumber = 3,
    kApiResultFieldNumber = 4,
    kApiErrnoFieldNumber = 5,
    kDevIdFieldNumber = 1,
  };
  // string api_name = 2;
  void clear_api_name();
  const std::string& api_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_api_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_api_name();
  PROTOBUF_NODISCARD std::string* release_api_name();
  void set_allocated_api_name(std::string* api_name);
  private:
  const std::string& _internal_api_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_api_name(const std::string& value);
  std::string* _internal_mutable_api_name();
  public:

  // string api_args = 3;
  void clear_api_args();
  const std::string& api_args() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_api_args(ArgT0&& arg0, ArgT... args);
  std::string* mutable_api_args();
  PROTOBUF_NODISCARD std::string* release_api_args();
  void set_allocated_api_args(std::string* api_args);
  private:
  const std::string& _internal_api_args() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_api_args(const std::string& value);
  std::string* _internal_mutable_api_args();
  public:

  // string api_result = 4;
  void clear_api_result();
  const std::string& api_result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_api_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_api_result();
  PROTOBUF_NODISCARD std::string* release_api_result();
  void set_allocated_api_result(std::string* api_result);
  private:
  const std::string& _internal_api_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_api_result(const std::string& value);
  std::string* _internal_mutable_api_result();
  public:

  // string api_errno = 5;
  void clear_api_errno();
  const std::string& api_errno() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_api_errno(ArgT0&& arg0, ArgT... args);
  std::string* mutable_api_errno();
  PROTOBUF_NODISCARD std::string* release_api_errno();
  void set_allocated_api_errno(std::string* api_errno);
  private:
  const std::string& _internal_api_errno() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_api_errno(const std::string& value);
  std::string* _internal_mutable_api_errno();
  public:

  // int32 dev_id = 1;
  void clear_dev_id();
  int32_t dev_id() const;
  void set_dev_id(int32_t value);
  private:
  int32_t _internal_dev_id() const;
  void _internal_set_dev_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:collect.ApiInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_errno_;
  int32_t dev_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fcollect_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CollectResult

// bool ok = 1;
inline void CollectResult::clear_ok() {
  ok_ = false;
}
inline bool CollectResult::_internal_ok() const {
  return ok_;
}
inline bool CollectResult::ok() const {
  // @@protoc_insertion_point(field_get:collect.CollectResult.ok)
  return _internal_ok();
}
inline void CollectResult::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void CollectResult::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:collect.CollectResult.ok)
}

// int32 result = 2;
inline void CollectResult::clear_result() {
  result_ = 0;
}
inline int32_t CollectResult::_internal_result() const {
  return result_;
}
inline int32_t CollectResult::result() const {
  // @@protoc_insertion_point(field_get:collect.CollectResult.result)
  return _internal_result();
}
inline void CollectResult::_internal_set_result(int32_t value) {
  
  result_ = value;
}
inline void CollectResult::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:collect.CollectResult.result)
}

// string msg = 3;
inline void CollectResult::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& CollectResult::msg() const {
  // @@protoc_insertion_point(field_get:collect.CollectResult.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CollectResult::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:collect.CollectResult.msg)
}
inline std::string* CollectResult::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:collect.CollectResult.msg)
  return _s;
}
inline const std::string& CollectResult::_internal_msg() const {
  return msg_.Get();
}
inline void CollectResult::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CollectResult::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CollectResult::release_msg() {
  // @@protoc_insertion_point(field_release:collect.CollectResult.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CollectResult::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:collect.CollectResult.msg)
}

// -------------------------------------------------------------------

// DeviceInfo

// string model = 1;
inline void DeviceInfo::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& DeviceInfo::model() const {
  // @@protoc_insertion_point(field_get:collect.DeviceInfo.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_model(ArgT0&& arg0, ArgT... args) {
 
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:collect.DeviceInfo.model)
}
inline std::string* DeviceInfo::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:collect.DeviceInfo.model)
  return _s;
}
inline const std::string& DeviceInfo::_internal_model() const {
  return model_.Get();
}
inline void DeviceInfo::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_model() {
  // @@protoc_insertion_point(field_release:collect.DeviceInfo.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:collect.DeviceInfo.model)
}

// string product = 2;
inline void DeviceInfo::clear_product() {
  product_.ClearToEmpty();
}
inline const std::string& DeviceInfo::product() const {
  // @@protoc_insertion_point(field_get:collect.DeviceInfo.product)
  return _internal_product();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_product(ArgT0&& arg0, ArgT... args) {
 
 product_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:collect.DeviceInfo.product)
}
inline std::string* DeviceInfo::mutable_product() {
  std::string* _s = _internal_mutable_product();
  // @@protoc_insertion_point(field_mutable:collect.DeviceInfo.product)
  return _s;
}
inline const std::string& DeviceInfo::_internal_product() const {
  return product_.Get();
}
inline void DeviceInfo::_internal_set_product(const std::string& value) {
  
  product_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_product() {
  
  return product_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_product() {
  // @@protoc_insertion_point(field_release:collect.DeviceInfo.product)
  return product_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_product(std::string* product) {
  if (product != nullptr) {
    
  } else {
    
  }
  product_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (product_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    product_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:collect.DeviceInfo.product)
}

// -------------------------------------------------------------------

// FileInfo

// int32 dev_id = 1;
inline void FileInfo::clear_dev_id() {
  dev_id_ = 0;
}
inline int32_t FileInfo::_internal_dev_id() const {
  return dev_id_;
}
inline int32_t FileInfo::dev_id() const {
  // @@protoc_insertion_point(field_get:collect.FileInfo.dev_id)
  return _internal_dev_id();
}
inline void FileInfo::_internal_set_dev_id(int32_t value) {
  
  dev_id_ = value;
}
inline void FileInfo::set_dev_id(int32_t value) {
  _internal_set_dev_id(value);
  // @@protoc_insertion_point(field_set:collect.FileInfo.dev_id)
}

// string file_path = 2;
inline void FileInfo::clear_file_path() {
  file_path_.ClearToEmpty();
}
inline const std::string& FileInfo::file_path() const {
  // @@protoc_insertion_point(field_get:collect.FileInfo.file_path)
  return _internal_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileInfo::set_file_path(ArgT0&& arg0, ArgT... args) {
 
 file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:collect.FileInfo.file_path)
}
inline std::string* FileInfo::mutable_file_path() {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:collect.FileInfo.file_path)
  return _s;
}
inline const std::string& FileInfo::_internal_file_path() const {
  return file_path_.Get();
}
inline void FileInfo::_internal_set_file_path(const std::string& value) {
  
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileInfo::_internal_mutable_file_path() {
  
  return file_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileInfo::release_file_path() {
  // @@protoc_insertion_point(field_release:collect.FileInfo.file_path)
  return file_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileInfo::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  file_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:collect.FileInfo.file_path)
}

// string file_attr = 3;
inline void FileInfo::clear_file_attr() {
  file_attr_.ClearToEmpty();
}
inline const std::string& FileInfo::file_attr() const {
  // @@protoc_insertion_point(field_get:collect.FileInfo.file_attr)
  return _internal_file_attr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileInfo::set_file_attr(ArgT0&& arg0, ArgT... args) {
 
 file_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:collect.FileInfo.file_attr)
}
inline std::string* FileInfo::mutable_file_attr() {
  std::string* _s = _internal_mutable_file_attr();
  // @@protoc_insertion_point(field_mutable:collect.FileInfo.file_attr)
  return _s;
}
inline const std::string& FileInfo::_internal_file_attr() const {
  return file_attr_.Get();
}
inline void FileInfo::_internal_set_file_attr(const std::string& value) {
  
  file_attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileInfo::_internal_mutable_file_attr() {
  
  return file_attr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileInfo::release_file_attr() {
  // @@protoc_insertion_point(field_release:collect.FileInfo.file_attr)
  return file_attr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileInfo::set_allocated_file_attr(std::string* file_attr) {
  if (file_attr != nullptr) {
    
  } else {
    
  }
  file_attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_attr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_attr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:collect.FileInfo.file_attr)
}

// string file_attr_ex = 4;
inline void FileInfo::clear_file_attr_ex() {
  file_attr_ex_.ClearToEmpty();
}
inline const std::string& FileInfo::file_attr_ex() const {
  // @@protoc_insertion_point(field_get:collect.FileInfo.file_attr_ex)
  return _internal_file_attr_ex();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileInfo::set_file_attr_ex(ArgT0&& arg0, ArgT... args) {
 
 file_attr_ex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:collect.FileInfo.file_attr_ex)
}
inline std::string* FileInfo::mutable_file_attr_ex() {
  std::string* _s = _internal_mutable_file_attr_ex();
  // @@protoc_insertion_point(field_mutable:collect.FileInfo.file_attr_ex)
  return _s;
}
inline const std::string& FileInfo::_internal_file_attr_ex() const {
  return file_attr_ex_.Get();
}
inline void FileInfo::_internal_set_file_attr_ex(const std::string& value) {
  
  file_attr_ex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileInfo::_internal_mutable_file_attr_ex() {
  
  return file_attr_ex_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileInfo::release_file_attr_ex() {
  // @@protoc_insertion_point(field_release:collect.FileInfo.file_attr_ex)
  return file_attr_ex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileInfo::set_allocated_file_attr_ex(std::string* file_attr_ex) {
  if (file_attr_ex != nullptr) {
    
  } else {
    
  }
  file_attr_ex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_attr_ex,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_attr_ex_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_attr_ex_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:collect.FileInfo.file_attr_ex)
}

// int32 errno = 5;
inline void FileInfo::clear_errno() {
  errno_ = 0;
}
inline int32_t FileInfo::_internal_errno() const {
  return errno_;
}
inline int32_t FileInfo::get_errno() const {
  // @@protoc_insertion_point(field_get:collect.FileInfo.errno)
  return _internal_errno();
}
inline void FileInfo::_internal_set_errno(int32_t value) {
  
  errno_ = value;
}
inline void FileInfo::set_errno(int32_t value) {
  _internal_set_errno(value);
  // @@protoc_insertion_point(field_set:collect.FileInfo.errno)
}

// bytes file_context = 6;
inline void FileInfo::clear_file_context() {
  file_context_.ClearToEmpty();
}
inline const std::string& FileInfo::file_context() const {
  // @@protoc_insertion_point(field_get:collect.FileInfo.file_context)
  return _internal_file_context();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileInfo::set_file_context(ArgT0&& arg0, ArgT... args) {
 
 file_context_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:collect.FileInfo.file_context)
}
inline std::string* FileInfo::mutable_file_context() {
  std::string* _s = _internal_mutable_file_context();
  // @@protoc_insertion_point(field_mutable:collect.FileInfo.file_context)
  return _s;
}
inline const std::string& FileInfo::_internal_file_context() const {
  return file_context_.Get();
}
inline void FileInfo::_internal_set_file_context(const std::string& value) {
  
  file_context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileInfo::_internal_mutable_file_context() {
  
  return file_context_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileInfo::release_file_context() {
  // @@protoc_insertion_point(field_release:collect.FileInfo.file_context)
  return file_context_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileInfo::set_allocated_file_context(std::string* file_context) {
  if (file_context != nullptr) {
    
  } else {
    
  }
  file_context_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_context,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_context_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:collect.FileInfo.file_context)
}

// string file_type = 7;
inline void FileInfo::clear_file_type() {
  file_type_.ClearToEmpty();
}
inline const std::string& FileInfo::file_type() const {
  // @@protoc_insertion_point(field_get:collect.FileInfo.file_type)
  return _internal_file_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileInfo::set_file_type(ArgT0&& arg0, ArgT... args) {
 
 file_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:collect.FileInfo.file_type)
}
inline std::string* FileInfo::mutable_file_type() {
  std::string* _s = _internal_mutable_file_type();
  // @@protoc_insertion_point(field_mutable:collect.FileInfo.file_type)
  return _s;
}
inline const std::string& FileInfo::_internal_file_type() const {
  return file_type_.Get();
}
inline void FileInfo::_internal_set_file_type(const std::string& value) {
  
  file_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileInfo::_internal_mutable_file_type() {
  
  return file_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileInfo::release_file_type() {
  // @@protoc_insertion_point(field_release:collect.FileInfo.file_type)
  return file_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileInfo::set_allocated_file_type(std::string* file_type) {
  if (file_type != nullptr) {
    
  } else {
    
  }
  file_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:collect.FileInfo.file_type)
}

// -------------------------------------------------------------------

// FileContext

// int32 file_id = 1;
inline void FileContext::clear_file_id() {
  file_id_ = 0;
}
inline int32_t FileContext::_internal_file_id() const {
  return file_id_;
}
inline int32_t FileContext::file_id() const {
  // @@protoc_insertion_point(field_get:collect.FileContext.file_id)
  return _internal_file_id();
}
inline void FileContext::_internal_set_file_id(int32_t value) {
  
  file_id_ = value;
}
inline void FileContext::set_file_id(int32_t value) {
  _internal_set_file_id(value);
  // @@protoc_insertion_point(field_set:collect.FileContext.file_id)
}

// int32 verify = 2;
inline void FileContext::clear_verify() {
  verify_ = 0;
}
inline int32_t FileContext::_internal_verify() const {
  return verify_;
}
inline int32_t FileContext::verify() const {
  // @@protoc_insertion_point(field_get:collect.FileContext.verify)
  return _internal_verify();
}
inline void FileContext::_internal_set_verify(int32_t value) {
  
  verify_ = value;
}
inline void FileContext::set_verify(int32_t value) {
  _internal_set_verify(value);
  // @@protoc_insertion_point(field_set:collect.FileContext.verify)
}

// int32 file_context_len = 3;
inline void FileContext::clear_file_context_len() {
  file_context_len_ = 0;
}
inline int32_t FileContext::_internal_file_context_len() const {
  return file_context_len_;
}
inline int32_t FileContext::file_context_len() const {
  // @@protoc_insertion_point(field_get:collect.FileContext.file_context_len)
  return _internal_file_context_len();
}
inline void FileContext::_internal_set_file_context_len(int32_t value) {
  
  file_context_len_ = value;
}
inline void FileContext::set_file_context_len(int32_t value) {
  _internal_set_file_context_len(value);
  // @@protoc_insertion_point(field_set:collect.FileContext.file_context_len)
}

// bytes file_context = 4;
inline void FileContext::clear_file_context() {
  file_context_.ClearToEmpty();
}
inline const std::string& FileContext::file_context() const {
  // @@protoc_insertion_point(field_get:collect.FileContext.file_context)
  return _internal_file_context();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileContext::set_file_context(ArgT0&& arg0, ArgT... args) {
 
 file_context_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:collect.FileContext.file_context)
}
inline std::string* FileContext::mutable_file_context() {
  std::string* _s = _internal_mutable_file_context();
  // @@protoc_insertion_point(field_mutable:collect.FileContext.file_context)
  return _s;
}
inline const std::string& FileContext::_internal_file_context() const {
  return file_context_.Get();
}
inline void FileContext::_internal_set_file_context(const std::string& value) {
  
  file_context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileContext::_internal_mutable_file_context() {
  
  return file_context_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileContext::release_file_context() {
  // @@protoc_insertion_point(field_release:collect.FileContext.file_context)
  return file_context_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileContext::set_allocated_file_context(std::string* file_context) {
  if (file_context != nullptr) {
    
  } else {
    
  }
  file_context_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_context,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_context_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_context_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:collect.FileContext.file_context)
}

// -------------------------------------------------------------------

// PropInfo

// int32 dev_id = 1;
inline void PropInfo::clear_dev_id() {
  dev_id_ = 0;
}
inline int32_t PropInfo::_internal_dev_id() const {
  return dev_id_;
}
inline int32_t PropInfo::dev_id() const {
  // @@protoc_insertion_point(field_get:collect.PropInfo.dev_id)
  return _internal_dev_id();
}
inline void PropInfo::_internal_set_dev_id(int32_t value) {
  
  dev_id_ = value;
}
inline void PropInfo::set_dev_id(int32_t value) {
  _internal_set_dev_id(value);
  // @@protoc_insertion_point(field_set:collect.PropInfo.dev_id)
}

// string local = 2;
inline void PropInfo::clear_local() {
  local_.ClearToEmpty();
}
inline const std::string& PropInfo::local() const {
  // @@protoc_insertion_point(field_get:collect.PropInfo.local)
  return _internal_local();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropInfo::set_local(ArgT0&& arg0, ArgT... args) {
 
 local_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:collect.PropInfo.local)
}
inline std::string* PropInfo::mutable_local() {
  std::string* _s = _internal_mutable_local();
  // @@protoc_insertion_point(field_mutable:collect.PropInfo.local)
  return _s;
}
inline const std::string& PropInfo::_internal_local() const {
  return local_.Get();
}
inline void PropInfo::_internal_set_local(const std::string& value) {
  
  local_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PropInfo::_internal_mutable_local() {
  
  return local_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PropInfo::release_local() {
  // @@protoc_insertion_point(field_release:collect.PropInfo.local)
  return local_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PropInfo::set_allocated_local(std::string* local) {
  if (local != nullptr) {
    
  } else {
    
  }
  local_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (local_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    local_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:collect.PropInfo.local)
}

// string origin = 3;
inline void PropInfo::clear_origin() {
  origin_.ClearToEmpty();
}
inline const std::string& PropInfo::origin() const {
  // @@protoc_insertion_point(field_get:collect.PropInfo.origin)
  return _internal_origin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropInfo::set_origin(ArgT0&& arg0, ArgT... args) {
 
 origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:collect.PropInfo.origin)
}
inline std::string* PropInfo::mutable_origin() {
  std::string* _s = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:collect.PropInfo.origin)
  return _s;
}
inline const std::string& PropInfo::_internal_origin() const {
  return origin_.Get();
}
inline void PropInfo::_internal_set_origin(const std::string& value) {
  
  origin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PropInfo::_internal_mutable_origin() {
  
  return origin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PropInfo::release_origin() {
  // @@protoc_insertion_point(field_release:collect.PropInfo.origin)
  return origin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PropInfo::set_allocated_origin(std::string* origin) {
  if (origin != nullptr) {
    
  } else {
    
  }
  origin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origin,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (origin_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    origin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:collect.PropInfo.origin)
}

// string key = 4;
inline void PropInfo::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& PropInfo::key() const {
  // @@protoc_insertion_point(field_get:collect.PropInfo.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropInfo::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:collect.PropInfo.key)
}
inline std::string* PropInfo::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:collect.PropInfo.key)
  return _s;
}
inline const std::string& PropInfo::_internal_key() const {
  return key_.Get();
}
inline void PropInfo::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PropInfo::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PropInfo::release_key() {
  // @@protoc_insertion_point(field_release:collect.PropInfo.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PropInfo::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:collect.PropInfo.key)
}

// string value = 5;
inline void PropInfo::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& PropInfo::value() const {
  // @@protoc_insertion_point(field_get:collect.PropInfo.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropInfo::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:collect.PropInfo.value)
}
inline std::string* PropInfo::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:collect.PropInfo.value)
  return _s;
}
inline const std::string& PropInfo::_internal_value() const {
  return value_.Get();
}
inline void PropInfo::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PropInfo::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PropInfo::release_value() {
  // @@protoc_insertion_point(field_release:collect.PropInfo.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PropInfo::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:collect.PropInfo.value)
}

// -------------------------------------------------------------------

// ApiInfo

// int32 dev_id = 1;
inline void ApiInfo::clear_dev_id() {
  dev_id_ = 0;
}
inline int32_t ApiInfo::_internal_dev_id() const {
  return dev_id_;
}
inline int32_t ApiInfo::dev_id() const {
  // @@protoc_insertion_point(field_get:collect.ApiInfo.dev_id)
  return _internal_dev_id();
}
inline void ApiInfo::_internal_set_dev_id(int32_t value) {
  
  dev_id_ = value;
}
inline void ApiInfo::set_dev_id(int32_t value) {
  _internal_set_dev_id(value);
  // @@protoc_insertion_point(field_set:collect.ApiInfo.dev_id)
}

// string api_name = 2;
inline void ApiInfo::clear_api_name() {
  api_name_.ClearToEmpty();
}
inline const std::string& ApiInfo::api_name() const {
  // @@protoc_insertion_point(field_get:collect.ApiInfo.api_name)
  return _internal_api_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ApiInfo::set_api_name(ArgT0&& arg0, ArgT... args) {
 
 api_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:collect.ApiInfo.api_name)
}
inline std::string* ApiInfo::mutable_api_name() {
  std::string* _s = _internal_mutable_api_name();
  // @@protoc_insertion_point(field_mutable:collect.ApiInfo.api_name)
  return _s;
}
inline const std::string& ApiInfo::_internal_api_name() const {
  return api_name_.Get();
}
inline void ApiInfo::_internal_set_api_name(const std::string& value) {
  
  api_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ApiInfo::_internal_mutable_api_name() {
  
  return api_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ApiInfo::release_api_name() {
  // @@protoc_insertion_point(field_release:collect.ApiInfo.api_name)
  return api_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ApiInfo::set_allocated_api_name(std::string* api_name) {
  if (api_name != nullptr) {
    
  } else {
    
  }
  api_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), api_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (api_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    api_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:collect.ApiInfo.api_name)
}

// string api_args = 3;
inline void ApiInfo::clear_api_args() {
  api_args_.ClearToEmpty();
}
inline const std::string& ApiInfo::api_args() const {
  // @@protoc_insertion_point(field_get:collect.ApiInfo.api_args)
  return _internal_api_args();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ApiInfo::set_api_args(ArgT0&& arg0, ArgT... args) {
 
 api_args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:collect.ApiInfo.api_args)
}
inline std::string* ApiInfo::mutable_api_args() {
  std::string* _s = _internal_mutable_api_args();
  // @@protoc_insertion_point(field_mutable:collect.ApiInfo.api_args)
  return _s;
}
inline const std::string& ApiInfo::_internal_api_args() const {
  return api_args_.Get();
}
inline void ApiInfo::_internal_set_api_args(const std::string& value) {
  
  api_args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ApiInfo::_internal_mutable_api_args() {
  
  return api_args_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ApiInfo::release_api_args() {
  // @@protoc_insertion_point(field_release:collect.ApiInfo.api_args)
  return api_args_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ApiInfo::set_allocated_api_args(std::string* api_args) {
  if (api_args != nullptr) {
    
  } else {
    
  }
  api_args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), api_args,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (api_args_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    api_args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:collect.ApiInfo.api_args)
}

// string api_result = 4;
inline void ApiInfo::clear_api_result() {
  api_result_.ClearToEmpty();
}
inline const std::string& ApiInfo::api_result() const {
  // @@protoc_insertion_point(field_get:collect.ApiInfo.api_result)
  return _internal_api_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ApiInfo::set_api_result(ArgT0&& arg0, ArgT... args) {
 
 api_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:collect.ApiInfo.api_result)
}
inline std::string* ApiInfo::mutable_api_result() {
  std::string* _s = _internal_mutable_api_result();
  // @@protoc_insertion_point(field_mutable:collect.ApiInfo.api_result)
  return _s;
}
inline const std::string& ApiInfo::_internal_api_result() const {
  return api_result_.Get();
}
inline void ApiInfo::_internal_set_api_result(const std::string& value) {
  
  api_result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ApiInfo::_internal_mutable_api_result() {
  
  return api_result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ApiInfo::release_api_result() {
  // @@protoc_insertion_point(field_release:collect.ApiInfo.api_result)
  return api_result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ApiInfo::set_allocated_api_result(std::string* api_result) {
  if (api_result != nullptr) {
    
  } else {
    
  }
  api_result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), api_result,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (api_result_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    api_result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:collect.ApiInfo.api_result)
}

// string api_errno = 5;
inline void ApiInfo::clear_api_errno() {
  api_errno_.ClearToEmpty();
}
inline const std::string& ApiInfo::api_errno() const {
  // @@protoc_insertion_point(field_get:collect.ApiInfo.api_errno)
  return _internal_api_errno();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ApiInfo::set_api_errno(ArgT0&& arg0, ArgT... args) {
 
 api_errno_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:collect.ApiInfo.api_errno)
}
inline std::string* ApiInfo::mutable_api_errno() {
  std::string* _s = _internal_mutable_api_errno();
  // @@protoc_insertion_point(field_mutable:collect.ApiInfo.api_errno)
  return _s;
}
inline const std::string& ApiInfo::_internal_api_errno() const {
  return api_errno_.Get();
}
inline void ApiInfo::_internal_set_api_errno(const std::string& value) {
  
  api_errno_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ApiInfo::_internal_mutable_api_errno() {
  
  return api_errno_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ApiInfo::release_api_errno() {
  // @@protoc_insertion_point(field_release:collect.ApiInfo.api_errno)
  return api_errno_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ApiInfo::set_allocated_api_errno(std::string* api_errno) {
  if (api_errno != nullptr) {
    
  } else {
    
  }
  api_errno_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), api_errno,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (api_errno_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    api_errno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:collect.ApiInfo.api_errno)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace collect

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fcollect_2eproto
