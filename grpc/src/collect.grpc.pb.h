// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/collect.proto
#ifndef GRPC_proto_2fcollect_2eproto__INCLUDED
#define GRPC_proto_2fcollect_2eproto__INCLUDED

#include "collect.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace collect {

class CollectService final {
 public:
  static constexpr char const* service_full_name() {
    return "collect.CollectService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status add_devices(::grpc::ClientContext* context, const ::collect::DeviceInfo& request, ::collect::CollectResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>> Asyncadd_devices(::grpc::ClientContext* context, const ::collect::DeviceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>>(Asyncadd_devicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>> PrepareAsyncadd_devices(::grpc::ClientContext* context, const ::collect::DeviceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>>(PrepareAsyncadd_devicesRaw(context, request, cq));
    }
    virtual ::grpc::Status add_file_info(::grpc::ClientContext* context, const ::collect::FileInfo& request, ::collect::CollectResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>> Asyncadd_file_info(::grpc::ClientContext* context, const ::collect::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>>(Asyncadd_file_infoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>> PrepareAsyncadd_file_info(::grpc::ClientContext* context, const ::collect::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>>(PrepareAsyncadd_file_infoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::collect::FileContext>> add_file_context(::grpc::ClientContext* context, ::collect::CollectResult* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::collect::FileContext>>(add_file_contextRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::collect::FileContext>> Asyncadd_file_context(::grpc::ClientContext* context, ::collect::CollectResult* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::collect::FileContext>>(Asyncadd_file_contextRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::collect::FileContext>> PrepareAsyncadd_file_context(::grpc::ClientContext* context, ::collect::CollectResult* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::collect::FileContext>>(PrepareAsyncadd_file_contextRaw(context, response, cq));
    }
    virtual ::grpc::Status add_prop_info(::grpc::ClientContext* context, const ::collect::PropInfo& request, ::collect::CollectResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>> Asyncadd_prop_info(::grpc::ClientContext* context, const ::collect::PropInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>>(Asyncadd_prop_infoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>> PrepareAsyncadd_prop_info(::grpc::ClientContext* context, const ::collect::PropInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>>(PrepareAsyncadd_prop_infoRaw(context, request, cq));
    }
    virtual ::grpc::Status add_linux_api_info(::grpc::ClientContext* context, const ::collect::ApiInfo& request, ::collect::CollectResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>> Asyncadd_linux_api_info(::grpc::ClientContext* context, const ::collect::ApiInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>>(Asyncadd_linux_api_infoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>> PrepareAsyncadd_linux_api_info(::grpc::ClientContext* context, const ::collect::ApiInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>>(PrepareAsyncadd_linux_api_infoRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void add_devices(::grpc::ClientContext* context, const ::collect::DeviceInfo* request, ::collect::CollectResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void add_devices(::grpc::ClientContext* context, const ::collect::DeviceInfo* request, ::collect::CollectResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void add_file_info(::grpc::ClientContext* context, const ::collect::FileInfo* request, ::collect::CollectResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void add_file_info(::grpc::ClientContext* context, const ::collect::FileInfo* request, ::collect::CollectResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void add_file_context(::grpc::ClientContext* context, ::collect::CollectResult* response, ::grpc::ClientWriteReactor< ::collect::FileContext>* reactor) = 0;
      virtual void add_prop_info(::grpc::ClientContext* context, const ::collect::PropInfo* request, ::collect::CollectResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void add_prop_info(::grpc::ClientContext* context, const ::collect::PropInfo* request, ::collect::CollectResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void add_linux_api_info(::grpc::ClientContext* context, const ::collect::ApiInfo* request, ::collect::CollectResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void add_linux_api_info(::grpc::ClientContext* context, const ::collect::ApiInfo* request, ::collect::CollectResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>* Asyncadd_devicesRaw(::grpc::ClientContext* context, const ::collect::DeviceInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>* PrepareAsyncadd_devicesRaw(::grpc::ClientContext* context, const ::collect::DeviceInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>* Asyncadd_file_infoRaw(::grpc::ClientContext* context, const ::collect::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>* PrepareAsyncadd_file_infoRaw(::grpc::ClientContext* context, const ::collect::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::collect::FileContext>* add_file_contextRaw(::grpc::ClientContext* context, ::collect::CollectResult* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::collect::FileContext>* Asyncadd_file_contextRaw(::grpc::ClientContext* context, ::collect::CollectResult* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::collect::FileContext>* PrepareAsyncadd_file_contextRaw(::grpc::ClientContext* context, ::collect::CollectResult* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>* Asyncadd_prop_infoRaw(::grpc::ClientContext* context, const ::collect::PropInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>* PrepareAsyncadd_prop_infoRaw(::grpc::ClientContext* context, const ::collect::PropInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>* Asyncadd_linux_api_infoRaw(::grpc::ClientContext* context, const ::collect::ApiInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::collect::CollectResult>* PrepareAsyncadd_linux_api_infoRaw(::grpc::ClientContext* context, const ::collect::ApiInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status add_devices(::grpc::ClientContext* context, const ::collect::DeviceInfo& request, ::collect::CollectResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>> Asyncadd_devices(::grpc::ClientContext* context, const ::collect::DeviceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>>(Asyncadd_devicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>> PrepareAsyncadd_devices(::grpc::ClientContext* context, const ::collect::DeviceInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>>(PrepareAsyncadd_devicesRaw(context, request, cq));
    }
    ::grpc::Status add_file_info(::grpc::ClientContext* context, const ::collect::FileInfo& request, ::collect::CollectResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>> Asyncadd_file_info(::grpc::ClientContext* context, const ::collect::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>>(Asyncadd_file_infoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>> PrepareAsyncadd_file_info(::grpc::ClientContext* context, const ::collect::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>>(PrepareAsyncadd_file_infoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::collect::FileContext>> add_file_context(::grpc::ClientContext* context, ::collect::CollectResult* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::collect::FileContext>>(add_file_contextRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::collect::FileContext>> Asyncadd_file_context(::grpc::ClientContext* context, ::collect::CollectResult* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::collect::FileContext>>(Asyncadd_file_contextRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::collect::FileContext>> PrepareAsyncadd_file_context(::grpc::ClientContext* context, ::collect::CollectResult* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::collect::FileContext>>(PrepareAsyncadd_file_contextRaw(context, response, cq));
    }
    ::grpc::Status add_prop_info(::grpc::ClientContext* context, const ::collect::PropInfo& request, ::collect::CollectResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>> Asyncadd_prop_info(::grpc::ClientContext* context, const ::collect::PropInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>>(Asyncadd_prop_infoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>> PrepareAsyncadd_prop_info(::grpc::ClientContext* context, const ::collect::PropInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>>(PrepareAsyncadd_prop_infoRaw(context, request, cq));
    }
    ::grpc::Status add_linux_api_info(::grpc::ClientContext* context, const ::collect::ApiInfo& request, ::collect::CollectResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>> Asyncadd_linux_api_info(::grpc::ClientContext* context, const ::collect::ApiInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>>(Asyncadd_linux_api_infoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>> PrepareAsyncadd_linux_api_info(::grpc::ClientContext* context, const ::collect::ApiInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>>(PrepareAsyncadd_linux_api_infoRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void add_devices(::grpc::ClientContext* context, const ::collect::DeviceInfo* request, ::collect::CollectResult* response, std::function<void(::grpc::Status)>) override;
      void add_devices(::grpc::ClientContext* context, const ::collect::DeviceInfo* request, ::collect::CollectResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void add_file_info(::grpc::ClientContext* context, const ::collect::FileInfo* request, ::collect::CollectResult* response, std::function<void(::grpc::Status)>) override;
      void add_file_info(::grpc::ClientContext* context, const ::collect::FileInfo* request, ::collect::CollectResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void add_file_context(::grpc::ClientContext* context, ::collect::CollectResult* response, ::grpc::ClientWriteReactor< ::collect::FileContext>* reactor) override;
      void add_prop_info(::grpc::ClientContext* context, const ::collect::PropInfo* request, ::collect::CollectResult* response, std::function<void(::grpc::Status)>) override;
      void add_prop_info(::grpc::ClientContext* context, const ::collect::PropInfo* request, ::collect::CollectResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void add_linux_api_info(::grpc::ClientContext* context, const ::collect::ApiInfo* request, ::collect::CollectResult* response, std::function<void(::grpc::Status)>) override;
      void add_linux_api_info(::grpc::ClientContext* context, const ::collect::ApiInfo* request, ::collect::CollectResult* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>* Asyncadd_devicesRaw(::grpc::ClientContext* context, const ::collect::DeviceInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>* PrepareAsyncadd_devicesRaw(::grpc::ClientContext* context, const ::collect::DeviceInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>* Asyncadd_file_infoRaw(::grpc::ClientContext* context, const ::collect::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>* PrepareAsyncadd_file_infoRaw(::grpc::ClientContext* context, const ::collect::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::collect::FileContext>* add_file_contextRaw(::grpc::ClientContext* context, ::collect::CollectResult* response) override;
    ::grpc::ClientAsyncWriter< ::collect::FileContext>* Asyncadd_file_contextRaw(::grpc::ClientContext* context, ::collect::CollectResult* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::collect::FileContext>* PrepareAsyncadd_file_contextRaw(::grpc::ClientContext* context, ::collect::CollectResult* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>* Asyncadd_prop_infoRaw(::grpc::ClientContext* context, const ::collect::PropInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>* PrepareAsyncadd_prop_infoRaw(::grpc::ClientContext* context, const ::collect::PropInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>* Asyncadd_linux_api_infoRaw(::grpc::ClientContext* context, const ::collect::ApiInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::collect::CollectResult>* PrepareAsyncadd_linux_api_infoRaw(::grpc::ClientContext* context, const ::collect::ApiInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_add_devices_;
    const ::grpc::internal::RpcMethod rpcmethod_add_file_info_;
    const ::grpc::internal::RpcMethod rpcmethod_add_file_context_;
    const ::grpc::internal::RpcMethod rpcmethod_add_prop_info_;
    const ::grpc::internal::RpcMethod rpcmethod_add_linux_api_info_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status add_devices(::grpc::ServerContext* context, const ::collect::DeviceInfo* request, ::collect::CollectResult* response);
    virtual ::grpc::Status add_file_info(::grpc::ServerContext* context, const ::collect::FileInfo* request, ::collect::CollectResult* response);
    virtual ::grpc::Status add_file_context(::grpc::ServerContext* context, ::grpc::ServerReader< ::collect::FileContext>* reader, ::collect::CollectResult* response);
    virtual ::grpc::Status add_prop_info(::grpc::ServerContext* context, const ::collect::PropInfo* request, ::collect::CollectResult* response);
    virtual ::grpc::Status add_linux_api_info(::grpc::ServerContext* context, const ::collect::ApiInfo* request, ::collect::CollectResult* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_add_devices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_add_devices() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_add_devices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_devices(::grpc::ServerContext* /*context*/, const ::collect::DeviceInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_devices(::grpc::ServerContext* context, ::collect::DeviceInfo* request, ::grpc::ServerAsyncResponseWriter< ::collect::CollectResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_add_file_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_add_file_info() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_add_file_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_file_info(::grpc::ServerContext* /*context*/, const ::collect::FileInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_file_info(::grpc::ServerContext* context, ::collect::FileInfo* request, ::grpc::ServerAsyncResponseWriter< ::collect::CollectResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_add_file_context : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_add_file_context() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_add_file_context() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_file_context(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::collect::FileContext>* /*reader*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_file_context(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::collect::CollectResult, ::collect::FileContext>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_add_prop_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_add_prop_info() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_add_prop_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_prop_info(::grpc::ServerContext* /*context*/, const ::collect::PropInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_prop_info(::grpc::ServerContext* context, ::collect::PropInfo* request, ::grpc::ServerAsyncResponseWriter< ::collect::CollectResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_add_linux_api_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_add_linux_api_info() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_add_linux_api_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_linux_api_info(::grpc::ServerContext* /*context*/, const ::collect::ApiInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_linux_api_info(::grpc::ServerContext* context, ::collect::ApiInfo* request, ::grpc::ServerAsyncResponseWriter< ::collect::CollectResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_add_devices<WithAsyncMethod_add_file_info<WithAsyncMethod_add_file_context<WithAsyncMethod_add_prop_info<WithAsyncMethod_add_linux_api_info<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_add_devices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_add_devices() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::collect::DeviceInfo, ::collect::CollectResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::collect::DeviceInfo* request, ::collect::CollectResult* response) { return this->add_devices(context, request, response); }));}
    void SetMessageAllocatorFor_add_devices(
        ::grpc::MessageAllocator< ::collect::DeviceInfo, ::collect::CollectResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::collect::DeviceInfo, ::collect::CollectResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_add_devices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_devices(::grpc::ServerContext* /*context*/, const ::collect::DeviceInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* add_devices(
      ::grpc::CallbackServerContext* /*context*/, const ::collect::DeviceInfo* /*request*/, ::collect::CollectResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_add_file_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_add_file_info() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::collect::FileInfo, ::collect::CollectResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::collect::FileInfo* request, ::collect::CollectResult* response) { return this->add_file_info(context, request, response); }));}
    void SetMessageAllocatorFor_add_file_info(
        ::grpc::MessageAllocator< ::collect::FileInfo, ::collect::CollectResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::collect::FileInfo, ::collect::CollectResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_add_file_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_file_info(::grpc::ServerContext* /*context*/, const ::collect::FileInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* add_file_info(
      ::grpc::CallbackServerContext* /*context*/, const ::collect::FileInfo* /*request*/, ::collect::CollectResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_add_file_context : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_add_file_context() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::collect::FileContext, ::collect::CollectResult>(
            [this](
                   ::grpc::CallbackServerContext* context, ::collect::CollectResult* response) { return this->add_file_context(context, response); }));
    }
    ~WithCallbackMethod_add_file_context() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_file_context(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::collect::FileContext>* /*reader*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::collect::FileContext>* add_file_context(
      ::grpc::CallbackServerContext* /*context*/, ::collect::CollectResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_add_prop_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_add_prop_info() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::collect::PropInfo, ::collect::CollectResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::collect::PropInfo* request, ::collect::CollectResult* response) { return this->add_prop_info(context, request, response); }));}
    void SetMessageAllocatorFor_add_prop_info(
        ::grpc::MessageAllocator< ::collect::PropInfo, ::collect::CollectResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::collect::PropInfo, ::collect::CollectResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_add_prop_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_prop_info(::grpc::ServerContext* /*context*/, const ::collect::PropInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* add_prop_info(
      ::grpc::CallbackServerContext* /*context*/, const ::collect::PropInfo* /*request*/, ::collect::CollectResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_add_linux_api_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_add_linux_api_info() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::collect::ApiInfo, ::collect::CollectResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::collect::ApiInfo* request, ::collect::CollectResult* response) { return this->add_linux_api_info(context, request, response); }));}
    void SetMessageAllocatorFor_add_linux_api_info(
        ::grpc::MessageAllocator< ::collect::ApiInfo, ::collect::CollectResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::collect::ApiInfo, ::collect::CollectResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_add_linux_api_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_linux_api_info(::grpc::ServerContext* /*context*/, const ::collect::ApiInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* add_linux_api_info(
      ::grpc::CallbackServerContext* /*context*/, const ::collect::ApiInfo* /*request*/, ::collect::CollectResult* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_add_devices<WithCallbackMethod_add_file_info<WithCallbackMethod_add_file_context<WithCallbackMethod_add_prop_info<WithCallbackMethod_add_linux_api_info<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_add_devices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_add_devices() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_add_devices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_devices(::grpc::ServerContext* /*context*/, const ::collect::DeviceInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_add_file_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_add_file_info() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_add_file_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_file_info(::grpc::ServerContext* /*context*/, const ::collect::FileInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_add_file_context : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_add_file_context() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_add_file_context() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_file_context(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::collect::FileContext>* /*reader*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_add_prop_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_add_prop_info() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_add_prop_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_prop_info(::grpc::ServerContext* /*context*/, const ::collect::PropInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_add_linux_api_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_add_linux_api_info() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_add_linux_api_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_linux_api_info(::grpc::ServerContext* /*context*/, const ::collect::ApiInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_add_devices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_add_devices() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_add_devices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_devices(::grpc::ServerContext* /*context*/, const ::collect::DeviceInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_devices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_add_file_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_add_file_info() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_add_file_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_file_info(::grpc::ServerContext* /*context*/, const ::collect::FileInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_file_info(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_add_file_context : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_add_file_context() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_add_file_context() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_file_context(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::collect::FileContext>* /*reader*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_file_context(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_add_prop_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_add_prop_info() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_add_prop_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_prop_info(::grpc::ServerContext* /*context*/, const ::collect::PropInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_prop_info(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_add_linux_api_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_add_linux_api_info() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_add_linux_api_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_linux_api_info(::grpc::ServerContext* /*context*/, const ::collect::ApiInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestadd_linux_api_info(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_add_devices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_add_devices() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->add_devices(context, request, response); }));
    }
    ~WithRawCallbackMethod_add_devices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_devices(::grpc::ServerContext* /*context*/, const ::collect::DeviceInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* add_devices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_add_file_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_add_file_info() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->add_file_info(context, request, response); }));
    }
    ~WithRawCallbackMethod_add_file_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_file_info(::grpc::ServerContext* /*context*/, const ::collect::FileInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* add_file_info(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_add_file_context : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_add_file_context() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->add_file_context(context, response); }));
    }
    ~WithRawCallbackMethod_add_file_context() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_file_context(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::collect::FileContext>* /*reader*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* add_file_context(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_add_prop_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_add_prop_info() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->add_prop_info(context, request, response); }));
    }
    ~WithRawCallbackMethod_add_prop_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_prop_info(::grpc::ServerContext* /*context*/, const ::collect::PropInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* add_prop_info(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_add_linux_api_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_add_linux_api_info() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->add_linux_api_info(context, request, response); }));
    }
    ~WithRawCallbackMethod_add_linux_api_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status add_linux_api_info(::grpc::ServerContext* /*context*/, const ::collect::ApiInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* add_linux_api_info(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_add_devices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_add_devices() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::collect::DeviceInfo, ::collect::CollectResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::collect::DeviceInfo, ::collect::CollectResult>* streamer) {
                       return this->Streamedadd_devices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_add_devices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status add_devices(::grpc::ServerContext* /*context*/, const ::collect::DeviceInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedadd_devices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::collect::DeviceInfo,::collect::CollectResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_add_file_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_add_file_info() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::collect::FileInfo, ::collect::CollectResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::collect::FileInfo, ::collect::CollectResult>* streamer) {
                       return this->Streamedadd_file_info(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_add_file_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status add_file_info(::grpc::ServerContext* /*context*/, const ::collect::FileInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedadd_file_info(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::collect::FileInfo,::collect::CollectResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_add_prop_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_add_prop_info() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::collect::PropInfo, ::collect::CollectResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::collect::PropInfo, ::collect::CollectResult>* streamer) {
                       return this->Streamedadd_prop_info(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_add_prop_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status add_prop_info(::grpc::ServerContext* /*context*/, const ::collect::PropInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedadd_prop_info(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::collect::PropInfo,::collect::CollectResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_add_linux_api_info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_add_linux_api_info() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::collect::ApiInfo, ::collect::CollectResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::collect::ApiInfo, ::collect::CollectResult>* streamer) {
                       return this->Streamedadd_linux_api_info(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_add_linux_api_info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status add_linux_api_info(::grpc::ServerContext* /*context*/, const ::collect::ApiInfo* /*request*/, ::collect::CollectResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedadd_linux_api_info(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::collect::ApiInfo,::collect::CollectResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_add_devices<WithStreamedUnaryMethod_add_file_info<WithStreamedUnaryMethod_add_prop_info<WithStreamedUnaryMethod_add_linux_api_info<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_add_devices<WithStreamedUnaryMethod_add_file_info<WithStreamedUnaryMethod_add_prop_info<WithStreamedUnaryMethod_add_linux_api_info<Service > > > > StreamedService;
};

}  // namespace collect


#endif  // GRPC_proto_2fcollect_2eproto__INCLUDED
